name: Release Workflow

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
    branches:
      - main

permissions:
  contents: write
  actions: read

jobs:
  check-release-needed:
    name: Check if Release Needed
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run'
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      tag_name: ${{ steps.check.outputs.tag_name }}
      version: ${{ steps.check.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Check if new tag was created
      id: check
      run: |
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -z "$LATEST_TAG" ]; then
          echo "No tags found"
          echo "should_release=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        echo "Latest tag: $LATEST_TAG"
        
        # Check if this tag already has a release
        if gh release view "$LATEST_TAG" >/dev/null 2>&1; then
          echo "Release already exists for tag $LATEST_TAG"
          echo "should_release=false" >> $GITHUB_OUTPUT
        else
          echo "No release found for tag $LATEST_TAG - will create release"
          echo "should_release=true" >> $GITHUB_OUTPUT
          echo "tag_name=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "version=${LATEST_TAG#v}" >> $GITHUB_OUTPUT
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: check-release-needed
    if: |
      github.event_name == 'push' || 
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' && needs.check-release-needed.outputs.should_release == 'true')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Extract version from tag
      id: version
      run: |
        if [[ "$GITHUB_EVENT_NAME" == "workflow_run" ]]; then
          # Use the tag from the check job
          TAG="${{ needs.check-release-needed.outputs.tag_name }}"
          VERSION="${{ needs.check-release-needed.outputs.version }}"
          echo "Triggered by workflow_run: $TAG"
        elif [[ "$GITHUB_REF" == refs/tags/* ]]; then
          # Automatic trigger from tag push
          TAG="${GITHUB_REF#refs/tags/}"
          VERSION="${TAG#v}"
          echo "Triggered by tag push: $TAG"
        else
          # Manual trigger - extract version from manifest.json
          VERSION=$(jq -r '.version' manifest.json)
          TAG="v$VERSION"
          echo "Triggered manually, using manifest version: $VERSION"
        fi
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Final tag: $TAG, version: $VERSION"

    - name: Validate version in manifest
      run: |
        MANIFEST_VERSION=$(jq -r '.version' manifest.json)
        TAG_VERSION="${{ steps.version.outputs.version }}"
        echo "Manifest version: $MANIFEST_VERSION"
        echo "Tag version: $TAG_VERSION"
        if [ "$MANIFEST_VERSION" != "$TAG_VERSION" ]; then
          echo "❌ Version mismatch: manifest.json ($MANIFEST_VERSION) != tag ($TAG_VERSION)"
          exit 1
        fi
        echo "✓ Version matches between manifest and tag"

    - name: Run tests
      run: |
        echo "🧪 Running tests for release..."
        npm run test:coverage

    - name: Run linting
      run: npm run lint

    - name: Build extension package
      run: npm run package

    - name: Verify package contents
      run: |
        echo "Verifying package contents..."
        unzip -l trello-task-creator-extension.zip
        
        # Check that manifest.json is at root level
        if unzip -l trello-task-creator-extension.zip | grep -q "manifest.json$"; then
          echo "✓ manifest.json is at root level"
        else
          echo "✗ manifest.json not found at root level"
          exit 1
        fi
        
        echo "📊 Package size: $(du -h trello-task-creator-extension.zip | cut -f1)"

    - name: Generate changelog
      id: changelog
      run: |
        echo "## Changes in ${{ steps.version.outputs.tag }}" > CHANGELOG_TEMP.md
        echo "" >> CHANGELOG_TEMP.md
        
        # Try to get commits since last tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${{ steps.version.outputs.tag }}^ 2>/dev/null || echo "")
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "### What's Changed" >> CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md
          git log --pretty=format:"- %s" ${PREVIOUS_TAG}..${{ steps.version.outputs.tag }} >> CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md
        fi
        
        echo "### Features" >> CHANGELOG_TEMP.md
        echo "- Create Trello tasks directly from Thunderbird emails" >> CHANGELOG_TEMP.md
        echo "- Select from your Trello boards and lists" >> CHANGELOG_TEMP.md
        echo "- Label selection and automatic 'thunderbird-email' labeling" >> CHANGELOG_TEMP.md
        echo "- Email subject and body pre-filling in task creation" >> CHANGELOG_TEMP.md
        echo "- On-the-fly label creation during task creation" >> CHANGELOG_TEMP.md
        echo "- Simple popup interface with comprehensive settings page" >> CHANGELOG_TEMP.md
        echo "- Secure API credential storage" >> CHANGELOG_TEMP.md
        echo "" >> CHANGELOG_TEMP.md
        echo "### Installation" >> CHANGELOG_TEMP.md
        echo "Download the ZIP file below and install it in Thunderbird via Tools → Add-ons → Install Add-on From File." >> CHANGELOG_TEMP.md
        echo "" >> CHANGELOG_TEMP.md
        echo "### Requirements" >> CHANGELOG_TEMP.md
        echo "- Thunderbird 78.0 or higher" >> CHANGELOG_TEMP.md
        echo "- Trello API key and token (see README for setup instructions)" >> CHANGELOG_TEMP.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: Trello Task Creator ${{ steps.version.outputs.tag }}
        body_path: CHANGELOG_TEMP.md
        files: |
          trello-task-creator-extension.zip
        draft: false
        prerelease: ${{ contains(steps.version.outputs.tag, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ steps.version.outputs.tag }}
        path: |
          trello-task-creator-extension.zip
          CHANGELOG_TEMP.md
        retention-days: 90
