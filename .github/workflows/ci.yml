name: CI/CD Pipeline

permissions:
  contents: write
  actions: read
  checks: read

on:
  push:
    branches: [ main, develop* ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Enable debug mode'
        required: false
        default: 'false'

jobs:
  test:
    name: Test Extension
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Run all tests with coverage
      run: |
        echo "🧪 Running all test suites..."
        npm run test:coverage -- --verbose
        echo "✅ All tests completed"
        
    - name: Display test results summary
      run: |
        echo "📊 Test Results Summary:"
        if [ -f coverage/lcov-report/index.html ]; then
          echo "✅ Coverage report generated"
        fi
        
        # Count test files
        TEST_FILES=$(find tests -name "*.test.js" | wc -l)
        echo "📝 Total test files: $TEST_FILES"
        
        # List test files for verification
        echo "📋 Test files found:"
        find tests -name "*.test.js" | sort
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        fail_ci_if_error: false

  test-report:
    name: Comprehensive Test Report
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests with detailed output
      run: |
        echo "🔍 Running comprehensive test analysis..."
        echo ""
        echo "📋 Test Files Found:"
        find tests -name "*.test.js" | sort | while read file; do
          echo "  - $file"
        done
        echo ""
        
        echo "🧪 Running all test suites..."
        npm test -- --verbose --passWithNoTests
        
        echo ""
        echo "📊 Test Suite Summary:"
        echo "$(find tests -name '*.test.js' | wc -l) test files found"
        
        # List test suites
        echo ""
        echo "📝 Test Suites:"
        find tests -name "*.test.js" | sed 's/tests\///g' | sed 's/\.test\.js//g' | sort | while read suite; do
          echo "  ✓ $suite"
        done
        
    - name: Verify all critical test files exist
      run: |
        echo "🔍 Verifying critical test files..."
        critical_tests=(
          "tests/background.test.js"
          "tests/popup-simple.test.js"
          "tests/options.test.js"
          "tests/manifest.test.js"
          "tests/integration.test.js"
          "tests/e2e-prefill.test.js"
          "tests/e2e-remember.test.js"
        )
        
        missing_tests=()
        for test in "${critical_tests[@]}"; do
          if [[ -f "$test" ]]; then
            echo "  ✅ $test"
          else
            echo "  ❌ $test (MISSING)"
            missing_tests+=("$test")
          fi
        done
        
        if [ ${#missing_tests[@]} -gt 0 ]; then
          echo ""
          echo "❌ Missing critical test files:"
          printf '  - %s\n' "${missing_tests[@]}"
          exit 1
        fi
        
        echo ""
        echo "✅ All critical test files are present!"

  validate:
    name: Validate Extension Structure
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate manifest.json
      run: |
        echo "Validating manifest.json..."
        python3 -m json.tool manifest.json > /dev/null
        echo "✓ manifest.json is valid JSON"
        
    - name: Check required files exist
      run: |
        echo "Checking required files..."
        required_files=("manifest.json" "popup.html" "popup.js" "options.html" "options.js" "background.js")
        for file in "${required_files[@]}"; do
          if [[ -f "$file" ]]; then
            echo "✓ $file exists"
          else
            echo "✗ $file is missing"
            exit 1
          fi
        done
        
    - name: Check icon files exist
      run: |
        echo "Checking icon files..."
        icon_sizes=("16" "32" "48" "128")
        for size in "${icon_sizes[@]}"; do
          if [[ -f "icons/trello-${size}.png" ]]; then
            echo "✓ icons/trello-${size}.png exists"
          else
            echo "✗ icons/trello-${size}.png is missing"
            exit 1
          fi
        done
        
    - name: Validate HTML files
      run: |
        echo "Validating HTML files..."
        html_files=("popup.html" "options.html")
        for file in "${html_files[@]}"; do
          if grep -q "<!DOCTYPE html>" "$file"; then
            echo "✓ $file has valid DOCTYPE"
          else
            echo "✗ $file missing DOCTYPE"
            exit 1
          fi
        done
        
    - name: Check JavaScript syntax
      run: |
        echo "Checking JavaScript syntax..."
        js_files=("popup.js" "options.js" "background.js")
        for file in "${js_files[@]}"; do
          if node -c "$file"; then
            echo "✓ $file has valid syntax"
          else
            echo "✗ $file has syntax errors"
            exit 1
          fi
        done

  build:
    name: Build Extension Package
    runs-on: ubuntu-latest
    needs: [test, test-report, validate]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build extension package
      run: npm run package
      
    - name: Verify package contents
      run: |
        echo "Verifying package contents..."
        unzip -l trello-task-creator-extension.zip
        
        # Check that manifest.json is at root level
        if unzip -l trello-task-creator-extension.zip | grep -q "manifest.json$"; then
          echo "✓ manifest.json is at root level"
        else
          echo "✗ manifest.json not found at root level"
          exit 1
        fi
        
    - name: Upload extension artifact
      uses: actions/upload-artifact@v4
      with:
        name: thunderbird-trello-extension-${{ github.sha }}
        path: trello-task-creator-extension.zip
        retention-days: 30

  web-ext-lint:
    name: Web-ext Validation
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install web-ext globally
      run: npm install -g web-ext
      
    - name: Run web-ext lint
      run: web-ext lint --source-dir=. --ignore-files=node_modules tests package.json package-lock.json .github .git coverage
      
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
      
    - name: Check for secrets in code
      run: |
        echo "Scanning for potential secrets..."
        if grep -r -i "api.key\|password\|secret\|token" *.js --exclude-dir=node_modules --exclude-dir=tests; then
          echo "⚠️ Potential secrets found in code - please review"
        else
          echo "✓ No obvious secrets found in code"
        fi

  auto-tag:
    name: Auto Tag Release
    runs-on: ubuntu-latest
    needs: [test, test-report, validate, build, web-ext-lint, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    outputs:
      tag_created: ${{ steps.tag_creation.outputs.created }}
      tag_name: ${{ steps.version.outputs.tag }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed to get all tags
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Get version from manifest
      id: version
      run: |
        VERSION=$(grep '"version"' manifest.json | cut -d'"' -f4)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$VERSION" >> $GITHUB_OUTPUT
        echo "Current version in manifest: $VERSION"
        
    - name: Check if tag already exists
      id: tag_check
      run: |
        if git tag --list | grep -q "^${{ steps.version.outputs.tag }}$"; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Tag ${{ steps.version.outputs.tag }} already exists"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Tag ${{ steps.version.outputs.tag }} does not exist"
        fi
        
    - name: Create and push tag
      id: tag_creation
      if: steps.tag_check.outputs.exists == 'false'
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
        echo "Creating tag ${{ steps.version.outputs.tag }}"
        git tag -a ${{ steps.version.outputs.tag }} -m "Release ${{ steps.version.outputs.tag }}"
        git push origin ${{ steps.version.outputs.tag }}
        
        echo "✅ Tag ${{ steps.version.outputs.tag }} created and pushed"
        echo "created=true" >> $GITHUB_OUTPUT
        
    - name: Skip tag creation
      if: steps.tag_check.outputs.exists == 'true'
      run: |
        echo "⏭️ Skipping tag creation - ${{ steps.version.outputs.tag }} already exists"
        echo "created=false" >> $GITHUB_OUTPUT
        
    - name: Set created output
      id: set_created_output
      run: |
        if [ "${{ steps.tag_check.outputs.exists }}" == "true" ]; then
          echo "created=false" >> $GITHUB_OUTPUT
        else
          echo "created=true" >> $GITHUB_OUTPUT
        fi
        
    - name: Store tag info for release workflow
      id: tag_creation
      run: |
        echo "⏭️ Skipping tag creation - ${{ steps.version.outputs.tag }} already exists"
        echo "created=false" >> $GITHUB_OUTPUT
        
    - name: Store tag info for release workflow
      if: steps.tag_creation.outputs.created == 'true'
      run: |
        echo "🏷️ New tag created: ${{ steps.version.outputs.tag }}"
        echo "Tag info will be available for the release workflow"
